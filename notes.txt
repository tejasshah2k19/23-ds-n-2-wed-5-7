AVL -> tree {Adelson, Velskii, and Landis}
 

20 30 40 50 60 70 

1) binary tree  {max 2 child }
2) binary search tree {binary tree,parent node greater right, parent node smaller left}
3) balance factor of node must be in [ -1 0 1 ]

bf|node| = left height - right height 

imbalance :-
1)  right right imbalance - RR { 20 30 40 }  ==> leftRotate  
2)  left left imbalance  -  LL { 40 30 20 }  ==> rightRotate 
3)  right left imbalance -  RL {20 30 25}    ==> rightRotate,leftRotate 
4)  left right imbalance -  LR {30 20 25}    ==> leftRotate,rightRotate


identify the imbalance is present or not ? 
if present then print balance factor and node who got the imbalance also print which imbalance 
generated !

76 86 99  -> RR 76 -2 


50  60  40 -> 


54   45    47 




10 20 40 23 54 66 55  9 2 100 

100 2 9 55 66 54 23 40 20 10 


------------------------------------------------------------


Graph -> 
    non linear DS 


    tree -> connected data set -> max 2 data {node}

    when we want to connect multiple node - data line 

    collection of vertices and edges 

    node -> vertex 
    line -> edge 

    vertex -> data 
    edge -> connector 

    G = {V,E}

linkedlist -> 






Royal App 
    class User{ 
            firstName ,email ,password 
    }
    
n numbers -> ArrayList<User> 







